# -*- coding: utf-8 -*-
"""Bab 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L91Y7GLtwqbWMigfIwXYcLvuGXziqBy5

# Bab 4: Representing Data and Engineering Features (Representasi Data dan Rekayasa Fitur)

## 1. Tujuan
Bab ini membahas pentingnya representasi data yang tepat dan bagaimana melakukan rekayasa fitur untuk meningkatkan performa model machine learning. Teknik seperti encoding variabel kategorikal, binning, interaksi antar fitur, dan seleksi fitur akan dijelaskan secara rinci.

## 2. Implementasi Kode
Berikut adalah contoh implementasi teknik rekayasa fitur:
"""

### 2.1 One-Hot Encoding (Encoding Variabel Kategorikal)
import pandas as pd

data = {
    'Kota': ['Bandung', 'Jakarta', 'Surabaya', 'Bandung', 'Jakarta'],
    'Harga': [100, 200, 150, 120, 250]
}
df = pd.DataFrame(data)
print("Data Asli:\n", df)

encoded_df = pd.get_dummies(df, columns=['Kota'])
print("Data setelah One-Hot Encoding:\n", encoded_df)

import numpy as np

# Data continuous
ages = [22, 25, 47, 35, 46, 55, 43, 50]

# Diskretisasi menjadi kelompok umur
bins = [20, 30, 40, 50, 60]
labels = ['20-30', '30-40', '40-50', '50-60']
age_bins = pd.cut(ages, bins=bins, labels=labels)
print("Kelompok umur:", age_bins)

### 2.3 Interaksi Antar Fitur
from sklearn.preprocessing import PolynomialFeatures

# Dataset sederhana
X = np.array([[1, 2], [2, 3], [3, 4]])

# Membuat interaksi fitur
poly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)
X_poly = poly.fit_transform(X)
print("Data asli:\n", X)
print("Data dengan interaksi fitur:\n", X_poly)

### 2.4 Seleksi Fitur (Feature Selection)
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel

# Dataset sederhana
X = [[0, 0, 1], [1, 0, 0], [0, 1, 1]]
y = [0, 1, 0]

# RandomForest untuk seleksi fitur
clf = RandomForestClassifier(n_estimators=10, random_state=0)
clf.fit(X, y)
model = SelectFromModel(clf, prefit=True)
X_new = model.transform(X)
print("Fitur yang dipilih:\n", X_new)

"""## 3. Penjelasan Teoritis

### 3.1 Pentingnya Representasi Data
Representasi data yang baik memengaruhi kemampuan model untuk memahami pola. Representasi yang salah dapat mengurangi performa model meskipun algoritma yang digunakan sudah optimal.

### 3.2 Teknik Rekayasa Fitur
- **One-Hot Encoding**: Digunakan untuk mengubah data kategorikal menjadi representasi numerik tanpa urutan.
- **Binning**: Mengelompokkan data continuous ke dalam interval diskret untuk mengurangi sensitivitas terhadap outlier.
- **Interaksi Fitur**: Menggabungkan dua atau lebih fitur untuk menangkap hubungan yang tidak terlihat dari fitur individu.
- **Seleksi Fitur**: Memilih subset fitur yang paling relevan untuk meningkatkan efisiensi model.

## 4. Insight & Ringkasan
- Teknik rekayasa fitur seperti one-hot encoding dan binning sangat penting untuk menangani data kategorikal dan continuous.
- Interaksi antar fitur dapat meningkatkan kemampuan model dalam menangkap pola kompleks.
- Seleksi fitur membantu mengurangi dimensi data dan meningkatkan efisiensi.
"""